{"version":3,"sources":["components/ArtCard.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["ArtCard","react_default","a","createElement","Card","Content","href","this","props","imageHQ","target","className","src","image","alt","albumName","Header","artistName","Meta","Description","date","Component","SearchBar","state","search","handleChange","e","_this","setState","value","handleSubmit","preventDefault","onSubmit","Input","placeholder","onChange","Button","type","App","resp","anyData","searching","searchData","artCard","results","map","el","index","releaseDate","substring","preImage","lastIndexOf","console","log","components_ArtCard","collectionName","key","str","encodeURIComponent","_this2","fetchJsonp","then","response","json","catch","ex","_this3","concat","Container","as","components_SearchBar","Grid","columns","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb3732a4.chunk.js","sourcesContent":["import { Card, Image } from 'semantic-ui-react'\nimport React, { Component } from 'react'\n\nclass ArtCard extends Component {\n  render(){\n    return(\n      <div>\n        <Card>\n          <Card.Content>\n            <a href={this.props.imageHQ} target='_blank'>\n              <img className='album-image' src={this.props.image} alt={this.props.albumName} />\n            </a>\n            <Card.Header>{this.props.artistName}</Card.Header>\n            <Card.Meta>{this.props.albumName}</Card.Meta>\n            <Card.Description>{this.props.date}</Card.Description>\n          </Card.Content>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default ArtCard","import React, { Component } from 'react'\nimport { Input, Button } from 'semantic-ui-react'\n\nclass SearchBar extends Component {\n\n  state = {\n    search: null,\n  }\n\n  handleChange = (e) => {\n    this.setState({ search: e.target.value})\n  }\n  \n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.search(this.state.search)\n  }\n\n  render() {\n    return(\n      <div className='search'>\n        <form onSubmit={this.handleSubmit}>\n        <Input placeholder='Artist and Album Search'  onChange={this.handleChange}></Input>\n        <Button className='Go' type='submit'>Go</Button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar","import React, { Component } from 'react';\nimport './App.css';\nimport fetchJsonp from 'fetch-jsonp'\nimport { Grid, Container, Header } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\nimport ArtCard from './components/ArtCard'\nimport SearchBar from './components/SearchBar';\n\n\nclass App extends Component {\n\n  state = {\n    resp: null,\n    anyData: false,\n    searching: false,\n    searchData: '',\n  }\n\n  componentDidMount() {\n    fetchJsonp('https://itunes.apple.com/search?term=deadmau5&entity=album&limit=28')\n      .then((response) => {\n        return response.json()\n      }).then((json) => {\n        this.setState({ resp: json, anyData: true})\n      }).catch((ex) => {\n        console.log('parsing failed', ex)\n      })\n  }\n\n  componentDidUpdate() {\n    if(this.state.searching === true) {\n      fetchJsonp(`https://itunes.apple.com/search?term=${this.state.searchData}&entity=album&limit=28`)\n      .then((response) => {\n        return response.json()\n      }).then((json) => {\n        this.setState({ resp: json, searching: false})\n      }).catch((ex) => {\n        console.log('parsing failed', ex)\n      })\n    }\n  }\n\n\n  artCard = () => {\n    return this.state.resp.results.map((el, index) => {\n      const date = el.releaseDate.substring(0,4)\n      const preImage = el['artworkUrl100']\n      const image = preImage.substring(0, preImage.lastIndexOf(\"/\") + 1) + \"300x300.jpg\";\n      const imageHQ = preImage.substring(0, preImage.lastIndexOf(\"/\") + 1) + \"10000x10000-999.jpg\";\n      console.log(el)\n      return <ArtCard artistName={el.artistName}  albumName={el.collectionName}  imageHQ={imageHQ} date={date} image={image} key={image}></ArtCard>\n    });\n  }\n  \n  search = (str) => {\n    this.setState({ searchData: encodeURIComponent(str), searching: true })\n  } \n\n  render() {\n    return (\n      <div className=\"App\">\n      <Container>\n        <Header as='h1'>Search For iTunes Album Art!</Header>\n        <SearchBar search={this.search} />\n        <Grid columns={4}>\n        {(this.state.anyData === true) ? \n          this.artCard() :\n          <div>Loading</div>\n        }\n        </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}